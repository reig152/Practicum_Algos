class Stack:
    """
    Реализован стек со следующим интерфейсом:
    1. init имеет в себе items: list, в котором и хранятся данные
    2. push добавляет элемент в конец стрека
    3. pop удаляет последний элемент списка
    Таким образом элемент добавляется в конец и удаляется первым,
    согласно LIFO.

    -- ВРЕМЕННАЯ СЛОЖНОСТЬ --
    Данные при добавлении и извлечении не перемещаются, ввиду чего:
    1. Добавление в стек стоит O(1)
    2. Извлечение из стека стоит O(1)
    
    -- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --
    Стек, содержащий k элементов, занимает O(k) памяти.
    Поэтому и мой стек будет потреблять O(n) памяти, занимаемый items.
    """
    def __init__(self):
        self.items = []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        return self.items.pop() if self.items else 'error'


def calc(stack, sign):
    """
    Данный метод производит вычисления
    на вход поступает экземляр стека и знак вычисления
    используется хеш-таблица, в которой указаны инструкции
    для каждого знака
    Далее поочередно из стека извлекаются элементы для
    выполения вычисления
    Результат вычисления добавляется в стек.
    
    -- ВРЕМЕННАЯ СЛОЖНОСТЬ --
    В реализации метода указано фиксированное количество операций,
    значит можно утвердить, что временная сложность составляет O(1)

    -- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --
    В данном методе используется dict, который в худшем случае
    занимает O(n) памяти, размер operations фиксирован и равен 4,
    значит можно сказать, что сложность составляет O(1)
    """
    operations = {
        '+': lambda x, y: x + y,
        '-': lambda x, y: x - y,
        '*': lambda x, y: x * y,
        '/': lambda x, y: x // y if y != 0 else "error"
    }
    
    a = stack.pop()
    b = stack.pop()

    result = operations.get(sign, "error")(b, a)
    stack.push(result)


def is_number(s):
    return s[-1].isdigit()


def main():
    stack = Stack()
    sentence = input().split()
    for s in sentence:
        if is_number(s):
            stack.push(int(s))
        elif s in ['-', '+', '*', '/']:
            calc(stack, s)

    print(stack.pop())

if __name__ == "__main__":
    main()
